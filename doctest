#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
This is the choice-parser Doctest documentation unit testing application.

>>> from router import Router
>>> r = Router()

########################################################################
>>> r.load(['-i', 'input/anarchy',
...         '-p', 'IndexParser',
...         '-s',
...         ])
>>> len(r.questions)
10

########################################################################
>>> r.load(['-i', 'input/drivers',
...         '-p', 'BlockParser',
...         '-s',
...         ])
>>> len(r.questions)
12

########################################################################
>>> r.load(['-i', 'input/reading',
...         '-p', 'IndexParser',
...         '-s',
...         ])
>>> len(r.questions)
15

########################################################################
>>> r.load(['-i', 'input/writing',
...         '-p', 'IndexParser',
...         '-s',
...         ])
>>> len(r.questions)
10

########################################################################
>>> r.load(['-i', 'input/choices',
...         '-p', 'IndexParser',
...         '-s',
...         ])
>>> len(r.questions)
7
"""
import doctest
import router
import parser
import filter
import writer

passed = failed = 0

def test(module = None):
    global passed, failed
    flags = doctest.ELLIPSIS | doctest.NORMALIZE_WHITESPACE
    
    if module:
        print module
        results = doctest.testmod(module, optionflags = flags)

    else:
        results = doctest.testmod(optionflags = flags)

    if results.attempted == 0:
        print "No tests were attempted:",
    elif results.failed == 0:
        print "Test passed.",

    print results
    
    passed += results.attempted - results.failed
    failed += results.failed

if __name__ == '__main__':

    print '\nThe first thing we do is test that all the input files pass muster.'
    test()

    print '\nThen we test the parser to see if it passes the test for robustness.'
    test(parser)

    print '\nThen we test the filter to see if it passes the test for robustness.'
    test(filter)

    print '\nThen we test the writer to see if it passes the test for robustness.'
    test(writer)

    print '\nThen we test the router to see if it passes the test for robustness.'
    test(router)

    if failed:
        print failed, 'test%s failed.' % ('s' if failed !=1 else '')
    else:
        if passed > 0:
            print 'All tests passed'
